{"version":3,"sources":["components/Nav/Nav.js","components/Jumbotron/Jumbotron.js","components/ClickyCard/ClickyCard.js","App.js","registerServiceWorker.js","index.js"],"names":["Nav","props","react_default","a","createElement","className","id","href","concat","navCenter","currentScore","topScore","Jumbotron","style","width","height","backgroundColor","ClickyCard","alt","name","src","image","key","onClick","handleClickevent","App","state","friends","this","setState","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","shuffle","_this2","components_Nav_Nav","components_Jumbotron_Jumbotron","Grid","Row","map","friend","Col","xs","md","components_ClickyCard_ClickyCard","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.2e34055d.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Nav.css\";\n\nconst Nav = props => (\n  <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary top-bar fixed\" id=\"navbar\">\n    <div className=\"row\">\n      <div className=\"col\">\n        <a className=\"navbar-brand\" href=\"/\">\n          Clicky Game\n        </a>\n      </div>\n      <div className=\"col\">\n        <h3>{`${props.navCenter||\"Click an image to begin!!\"}`}\n        </h3>\n      </div>\n      <div className=\"col\">\n        <h3>\n          <span>\n            Score: {`${props.currentScore||\"0\"}`} &nbsp;\n          </span>\n          <span>\n          | &nbsp;  Top Score: {`${props.topScore||\"0\"}`}\n          </span>\n        </h3>\n      </div>\n    </div>\n  </nav>\n);\n\nexport default Nav;\n","import React from 'react';\nimport \"./Jumbotron.css\";\n\n\nconst Jumbotron = () =>{\n    return(\n        <div className=\"jumbotron jumbotron-fluid backgroundForJum\">\n            <div className=\"container text text-center\">\n                <h1 className=\"display-3\">Clicky Game!!</h1>\n                <p className=\"lead\">Click on an images to earn points, but don't click on any more than once!!</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Jumbotron;\n\n","import React from 'react';\nimport './ClickyCard.css'\n\nconst style = {\n    width: \"100%\",\n    height: \"100%\",\n    backgroundColor: 'blue'\n};\n\nconst ClickyCard = props => {\n    return (\n        <div className=\"card text-center mag\"  >\n            <div className=\"card-body\" style={style} >\n                <img\n                    className=\"clickImage\"\n                    alt={props.name}\n                    src={props.image}\n                    key={props.id}\n                    onClick={() => props.handleClickevent(props.id)}/>\n            </div>\n        </div>\n    )\n}\n\nexport default ClickyCard;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Nav from \"./components/Nav\";\nimport Jumnotron from \"./components/Jumbotron\";\nimport ClickyCard from \"./components/ClickyCard\";\nimport friends from \"./friends.json\";\nimport { Row, Col, Grid } from \"react-bootstrap\";\n// import { uptime } from \"os\";\n\n// from this https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\nfunction shuffle(array) {\n  var currentIndex = array.length,\n    temporaryValue,\n    randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n  return array;\n}\n\nclass App extends Component {\n  state = {\n    friends,\n    navCenter: \"\",\n    // navCenter can be  \"You guessed incorrectly!!\" or \"You guessed correctly!!\"\n    currentScore: 0,\n    topScore: 0\n  };\n\n  componentDidMount() {\n    this.setState({ friends: shuffle(this.state.friends)});\n    // console.log(\"first shuffle array : \", this.state.friends);\n  }\n\n  // handleClickevent = id => {\n  //   console.log(\"what is this ID for:\" , id);\n  //   this.state.friends.map((item) => {\n  //     if(item.id === id){\n  //       if(!(item.clicked === false)){\n  //           item.clicked = true;\n\n\n  //       }else{\n        \n  //       }\n  //     }\n\n  //     return item;\n  //   }\n  //   );\n  // };\n\n  render() {\n    return (\n      <div>\n        <Nav\n          navCenter={this.state.navCenter}\n          currentScore={this.state.currentScore}\n          topScore={this.state.topScore}\n        />\n        <Jumnotron />\n\n        <Grid>\n          <Row className=\"show-grid\">\n            {this.state.friends.map((friend) => (\n              <Col xs={6} md={3}>\n                <ClickyCard\n                  name={friend.name}\n                  image={friend.image}\n                  key={friend.id}\n                  id={friend.id}\n                  handleClickevent={this.handleClickevent}\n                />\n              </Col>\n            ))}\n          </Row>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n\n"],"sourceRoot":""}